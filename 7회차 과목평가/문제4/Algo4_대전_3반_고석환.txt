1)
이 정렬알고리즘은 재귀적으로 동작하는 알고리즘이다.
우선 인자로 받은 배열의 길이가 2미만이면 배열을 반환한다
2 이상이면 배열을 반으로 나눈 후 각각의 반쪽짜리 배열에
대하여 재귀적으로 이 정렬알고리즘에 다시 넣은 후 정렬된 값을
left_arr, right_arr에 저장한다.
그 후에 left_arr과 right_arr을 합치는 과정이 있는데
left_arr과 right_arr의 시작을 가리키는 l, h라는 변수를 이용하여
두 배열에서 l, h가 가리키는 값 중 작은값을 tmp라는 배열에 넣고 작은 수가 나온 쪽의
시작을 가리키는 변수인 l 혹은 h를 1 증가시킨다.

우선 n개의 데이터를 반으로 나눠서 다시 정렬 알고리즘을 재귀적으로 실행시키기때문에

T(n) = T(n/2) + T(n/2) + @ 라고 할 수 있으며,
left_arr과 right_arr을 합치는 과정에서 길이가 n/2인 left_arr과 right_arr을
각각의 길이만큼 탐색하기 때문에 n/2+n/2 = n 의 추가적인 시간이 걸린다

따라서 이 정렬 알고리즘을 재귀식으로 나타내면
T(n) = 2T(n/2) + n
의 식이 나온다.

2)

T(n) = 2T(n/2) + n
T(n) = 2(2T(n/4) + n/2) + n = 2^2T(n/2^2) + 2n
T(n) = 2(2(2T(n/8) + n/4) + n/2) = 2^3T(n/2^3) + 3n
.
.
.
T(n) = 2^i*T(n/2^i)+i*n ==> (1)

T(n) = 2^i*T(n/2^i)+i*n이 베이스 케이스인데 이 정렬 알고리즘에서 베이스 케이스는 n < 2일떄 이므로
즉 n==1일떄 이다.

n/2^i = 1
n = 2^i
i = logn

i = logn을 (1)에 대입하면

T(n) = n*T(1) + nlogn이 나오며
이는 O(n)으로 나타냈을떄는 nlogn이다

즉 O(T(n)) = O(nlogn)이다.